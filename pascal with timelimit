public class PascalTriangle {

    public static void main(String[] args) {
        int n = 10; // Number of rows in Pascal's Triangle

        // Create an instance of PascalTrianglePrinter
        PascalTrianglePrinter printer = new PascalTrianglePrinter(n);

        // Create and start threads to print rows of Pascal's Triangle
        Thread[] threads = new Thread[n];
        for (int i = 0; i < n; i++) {
            threads[i] = new Thread(new RowPrinter(printer, i));
            threads[i].start();
        }

        // Wait for all threads to complete
        try {
            for (Thread thread : threads) {
                thread.join();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    // Class to represent Pascal's Triangle printer with synchronized method
    static class PascalTrianglePrinter {
        private final int[][] triangle;

        public PascalTrianglePrinter(int n) {
            triangle = new int[n][];
            for (int i = 0; i < n; i++) {
                triangle[i] = new int[i + 1];
            }
        }

        // Synchronized method to print a row of Pascal's Triangle
        public synchronized void printRow(int row) {
            int[] rowData = triangle[row];
            calculateRow(rowData);

            // Print the row
            for (int i = 0; i < rowData.length; i++) {
                System.out.print(rowData[i] + " ");
            }
            System.out.println();

            // Delay execution for 2000ms
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        // Helper method to calculate values of a row in Pascal's Triangle
        private void calculateRow(int[] row) {
            row[0] = 1;
            row[row.length - 1] = 1;
            for (int i = 1; i < row.length - 1; i++) {
                row[i] = triangle[row.length - 2][i - 1] + triangle[row.length - 2][i];
            }
        }
    }

    // Runnable class to print a specific row using PascalTrianglePrinter
    static class RowPrinter implements Runnable {
        private final PascalTrianglePrinter printer;
        private final int row;

        public RowPrinter(PascalTrianglePrinter printer, int row) {
            this.printer = printer;
            this.row = row;
        }

        @Override
        public void run() {
            printer.printRow(row);
        }
    }
}
